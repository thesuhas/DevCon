{"ast":null,"code":"// Bring in axios for http requests\nimport axios from \"axios\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR } from './types';\nimport { setAlert } from './alert';\nimport setAuthToken from '../utils/setAuthToken'; // Load User\n\nexport const loadUser = ({}) => async dispatch => {\n  // Put token of logged in user in a global header that can always be sent\n  if (localStorage.token) {\n    // Checks local storage token, if exists, calls function to continuously send\n    setAuthToken(localStorage.token);\n  } // Making request\n\n\n  try {\n    // Gets the user and dispaches if token exists\n    const res = axios.get('/api/auth');\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }; // Preparing data\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post('api/users', body, config); // Dispatch action\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors; // Gets body errors\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/suhas/Documents/College Projects/DevConnector/client/src/actions/auth.js"],"names":["axios","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","setAlert","setAuthToken","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","forEach","error","msg"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,EAA0BC,aAA1B,EAAyCC,WAAzC,EAAsDC,UAAtD,QAAuE,SAAvE;AACA,SAAQC,QAAR,QAAuB,SAAvB;AACA,OAAOC,YAAP,MAAyB,uBAAzB,C,CAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,CAAC,EAAD,KAAQ,MAAMC,QAAN,IAAkB;AAC9C;AACA,MAAIC,YAAY,CAACC,KAAjB,EAAwB;AACpB;AACAJ,IAAAA,YAAY,CAACG,YAAY,CAACC,KAAd,CAAZ;AACH,GAL6C,CAO9C;;;AACA,MAAI;AACA;AACA,UAAMC,GAAG,GAAGX,KAAK,CAACY,GAAN,CAAU,WAAV,CAAZ;AAEAJ,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEV,WADD;AAELW,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAKH,GATD,CASE,OAAOC,GAAP,EAAY;AACVR,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAGH;AACJ,CAtBM,C,CAyBP;;AACA,OAAO,MAAMa,QAAQ,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA;AAAd,CAAD,KAA6B,MAAMZ,QAAN,IAAkB;AACnE,QAAMa,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf,CADmE,CAOnE;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAACP,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,GAAf,CAAb;;AAEA,MAAI;AACA,UAAMT,GAAG,GAAG,MAAMX,KAAK,CAAC0B,IAAN,CAAW,WAAX,EAAwBH,IAAxB,EAA8BF,MAA9B,CAAlB,CADA,CAGA;;AACAb,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEZ,gBADD;AAELa,MAAAA,OAAO,EAAEH,GAAG,CAACI;AAFR,KAAD,CAAR;AAIH,GARD,CAQE,OAAOC,GAAP,EAAY;AACV,UAAMW,MAAM,GAAGX,GAAG,CAACY,QAAJ,CAAab,IAAb,CAAkBY,MAAjC,CADU,CAC+B;;AAEzC,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAItB,QAAQ,CAACH,QAAQ,CAACyB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AAEDvB,IAAAA,QAAQ,CAAC;AACLK,MAAAA,IAAI,EAAEX;AADD,KAAD,CAAR;AAGH;AACJ,CA7BM","sourcesContent":["// Bring in axios for http requests\r\nimport axios from \"axios\";\r\nimport {REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR} from './types';\r\nimport {setAlert} from './alert';\r\nimport setAuthToken from '../utils/setAuthToken';\r\n\r\n// Load User\r\nexport const loadUser = ({}) => async dispatch => {\r\n    // Put token of logged in user in a global header that can always be sent\r\n    if (localStorage.token) {\r\n        // Checks local storage token, if exists, calls function to continuously send\r\n        setAuthToken(localStorage.token);\r\n    }\r\n\r\n    // Making request\r\n    try {\r\n        // Gets the user and dispaches if token exists\r\n        const res = axios.get('/api/auth');\r\n\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: res.data\r\n        });\r\n\r\n    } catch (err) {\r\n        dispatch({\r\n            type: AUTH_ERROR\r\n        });\r\n    }\r\n}\r\n\r\n\r\n// Register user\r\nexport const register = ({name, email, password}) => async dispatch => {\r\n    const config = {\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }\r\n\r\n    // Preparing data\r\n    const body = JSON.stringify({name, email, password});\r\n\r\n    try {\r\n        const res = await axios.post('api/users', body, config);\r\n\r\n        // Dispatch action\r\n        dispatch({\r\n            type: REGISTER_SUCCESS,\r\n            payload: res.data\r\n        });\r\n    } catch (err) {\r\n        const errors = err.response.data.errors; // Gets body errors\r\n\r\n        if (errors) {\r\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\r\n        }\r\n\r\n        dispatch({\r\n            type: REGISTER_FAIL\r\n        });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}